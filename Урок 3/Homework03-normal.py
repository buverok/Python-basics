__author__ = 'Фещук Олег Анатольевич'

# Задание-1:
# Напишите функцию, возвращающую ряд Фибоначчи с n-элемента до m-элемента.
# Первыми элементами ряда считать цифры 1 1


def fibonacci(n, m):
    list = [1, 2]
    list2 = []
    for i in range(n,m+1):
        while i <= m:
            i = list[-1] + list[-2]
            list.append(i)
        list.remove(list[-1])
    for i in list:
        if i>=n:
            list2.append(i)
    return list2

print(fibonacci(15,1546))

#
#Когда я пытался решить задачу без создания второго списка, у меня не получилось убрать
#элементы в начале списка. Я использовал конструкцию
#for i in list:
#    if i < n:
#        list.remove(i)
# Элементы удалялись, но через один. Видимо, после каждого удаления, следующий элемент смещался
# на место удаленного элемента, и цикл for его пропускал, т.к. индекс уже был пройден.
# Подскажите, пожалуйста, оптимальный способ обойти эту проблему.
#
#####################################################

# Задача-2:
# Напишите функцию, сортирующую принимаемый список по возрастанию.
# Для сортировки используйте любой алгоритм (например пузырьковый).
# Для решения данной задачи нельзя использовать встроенную функцию и метод sort()

def sort_to_max(origin_list):
    listmintomax=[]
    while len(origin_list)>0:
        i = origin_list.pop(origin_list.index(min(origin_list)))
        listmintomax.append(i)
    return listmintomax

sort_to_max([2, 10, -12, 2.5, 20, -11, 4, 4, 0])

print(sort_to_max([2, 10, -12, 2.5, 20, -11, 4, 4, 0]))

# Задача-3:
# Напишите собственную реализацию стандартной функции filter.
# Разумеется, внутри нельзя использовать саму функцию filter.

def my_filter(cond,listf):
    listn=[]
    for i in range(len(listf)):
        if cond(listf[i]) == True:
            listn.append(listf[i])
    return listn

my_filter(lambda x: x>5, [1,5,3,8,4,45,32,12,0,-5,-111])

print(my_filter(lambda x: x>=5, [1,5,3,8,4,45,32,12,0,-5,-111]))

# Задача-4:
# Даны четыре точки А1(х1, у1), А2(x2 ,у2), А3(x3 , у3), А4(х4, у4).
# Определить, будут ли они вершинами параллелограмма.

from math import sqrt


A=(-3,11)
B=(12,-4)
C=(1,-7)
D=(-14, 8)

x1=A[0]
y1=A[1]
x2=B[0]
y2=B[1]
x3=C[0]
y3=C[1]
x4=D[0]
y4=D[1]


ab=sqrt((x2-x1)**2+(y2-y1)**2)
ac=sqrt((x3-x1)**2+(y3-y1)**2)
ad=sqrt((x4-x1)**2+(y4-y1)**2)
bc=sqrt((x3-x2)**2+(y3-y2)**2)
bd=sqrt((x4-x2)**2+(y4-y2)**2)
cd=sqrt((x4-x3)**2+(y4-y3)**2)

if ab==cd and bc==ad:
    print('Это параллелограмм')
elif ac==bd and bc==cd:
    print('Это параллелограмм')
else:
    print('Это не параллелограмм')

